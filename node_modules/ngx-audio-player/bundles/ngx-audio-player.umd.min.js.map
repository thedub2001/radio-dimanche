{"version":3,"sources":["../../../projects/ngx-audio-player/src/lib/service/audio-player-service/audio-player.service.ts","../../../projects/ngx-audio-player/src/lib/component/ngx-audio-player/ngx-audio-player.component.ts","../../../projects/ngx-audio-player/src/lib/pipe/seconds-to-minutes.ts","../../../projects/ngx-audio-player/src/lib/ngx-audio-player.module.ts","../../../projects/ngx-audio-player/src/lib/model/track.model.ts"],"names":["AudioPlayerService","this","tracks","playlistSubject$","BehaviorSubject","currentTrack","currentTrackSubject$","currentTime","currentTimeSubject$","prototype","setPlaylist","next","getPlaylist","asObservable","setCurrentTrack","getCurrentTrack","setCurrentTime","getCurrentTime","Injectable","args","providedIn","AudioPlayerComponent","elem","repeat","dataSource","MatTableDataSource","displayTitle","displayPlaylist","displayVolumeControls","displayRepeatControls","pageSizeOptions","expanded","autoPlay","disablePositionSlider","displayArtist","displayDuration","tableHeader","titleHeader","artistHeader","durationHeader","currentIndex","trackEnded","Subject","iOS","test","navigator","platform","maxTouchPoints","loaderDisplay","isPlaying","volume","duration","startOffsetValue","endOffset","nativeElement","tagName","toLowerCase","console","warn","audioPlayerService","Object","defineProperty","playlist","mp","paginator","setDataSourceAttributes","seconds","player","currTimePosChanged","event","value","bindPlayerEvent","_this","addEventListener","Math","floor","playBtnHandler","paused","startOffset","play","pause","track","setTimeout","toggleVolume","setVolume","toggleRepeat","length","vol","ngOnInit","checkIfSongHasStartedSinceAtleastTwoSeconds","nextSong","subscribe","initialize","ngOnChanges","changes","hasOwnProperty","buildDisplayedColumns","displayedColumns","push","updateCurrentTrack","index","forEach","pageSize","hasNextPage","nextPage","firstPage","previousSong","resetSong","hasPreviousPage","previousPage","lastPage","src","link","selectTrack","Component","selector","template","ElementRef","Input","ViewChild","MatPaginator","static","Output","SecondsToMinutesPipe","transform","time","hours","slice","minutes","Pipe","name","NgModule","declarations","imports","CommonModule","FormsModule","MatButtonModule","MatCardModule","MatTableModule","MatFormFieldModule","MatSliderModule","MatExpansionModule","MatPaginatorModule","MatIconModule","exports","toString","title"],"mappings":"opCAOA,IAAAA,EAAA,WAHA,SAAAA,IAMEC,KAAAC,OAAkB,GAClBD,KAAAE,iBACE,IAAIC,EAAAA,gBAAyBH,KAAKC,QAGpCD,KAAAI,aAAsB,KACtBJ,KAAAK,qBACE,IAAIF,EAAAA,gBAAuBH,KAAKI,cAGlCJ,KAAAM,YAAmB,KACnBN,KAAAO,oBACE,IAAIJ,EAAAA,gBAAqBH,KAAKM,oBAEhCP,EAAAS,UAAAC,YAAA,SAAYR,GACVD,KAAKC,OAASA,EACdD,KAAKE,iBAAiBQ,KAAKV,KAAKC,SAGlCF,EAAAS,UAAAG,YAAA,WACE,OAAOX,KAAKE,iBAAiBU,gBAG/Bb,EAAAS,UAAAK,gBAAA,SAAgBT,GACdJ,KAAKI,aAAeA,EACpBJ,KAAKK,qBAAqBK,KAAKV,KAAKI,eAGtCL,EAAAS,UAAAM,gBAAA,WACE,OAAOd,KAAKK,qBAAqBO,gBAGnCb,EAAAS,UAAAO,eAAA,SAAeT,GACbN,KAAKM,YAAcA,EACnBN,KAAKO,oBAAoBG,KAAKV,KAAKM,cAGrCP,EAAAS,UAAAQ,eAAA,WACE,OAAOhB,KAAKO,oBAAoBK,kBAzCpC,kHAHCK,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,4BCaV,SAAAC,EAAYC,GADZrB,KAAAsB,OAAiB,MAoBjBtB,KAAAuB,WAAa,IAAIC,EAAAA,mBAKjBxB,KAAAC,OAAkB,GAETD,KAAAyB,cAAe,EACfzB,KAAA0B,iBAAkB,EAClB1B,KAAA2B,uBAAwB,EACxB3B,KAAA4B,uBAAwB,EACxB5B,KAAA6B,gBAAkB,CAAC,GAAI,GAAI,IAC3B7B,KAAA8B,UAAW,EACX9B,KAAA+B,UAAW,EACX/B,KAAAgC,uBAAwB,EACxBhC,KAAAiC,eAAgB,EAChBjC,KAAAkC,iBAAkB,EAGlBlC,KAAAmC,YAAc,WACdnC,KAAAoC,YAAc,QACdpC,KAAAqC,aAAe,SACfrC,KAAAsC,eAAiB,WAG1BtC,KAAAuC,aAAe,EAGfvC,KAAAwC,WAA8B,IAAIC,EAAAA,QAIlCzC,KAAA0C,IAAO,mBAAmBC,KAAKC,UAAUC,WACV,aAAvBD,UAAUC,UAA2BD,UAAUE,eAAiB,EAExE9C,KAAA+C,eAAgB,EAChB/C,KAAAgD,WAAY,EACZhD,KAAAM,YAAc,EACdN,KAAAiD,OAAS,GACTjD,KAAAkD,SAAW,IAEHlD,KAAAmD,iBAAmB,EAWpBnD,KAAAoD,UAAY,EAtEkC,8BAA7C/B,EAAKgC,cAAcC,QAAQC,eAC3BC,QAAQC,KAAK,uFAEjBzD,KAAK0D,mBAAqB,IAAI3D,SAGlC4D,OAAAC,eACIxC,EAAAZ,UAAA,WAAQ,KADZ,SACaqD,GACT7D,KAAK0D,mBAAmBjD,YAAYoD,oCAGxCF,OAAAC,eAAgDxC,EAAAZ,UAAA,eAAY,KAA5D,SAA6DsD,GACzD9D,KAAK+D,UAAYD,EACjB9D,KAAKgE,2DA+CTL,OAAAC,eACIxC,EAAAZ,UAAA,cAAW,KAIf,WACI,OAAOR,KAAKmD,sBANhB,SACgBc,GACZjE,KAAKmD,iBAAmBc,EACxBjE,KAAKkE,OAAOb,cAAc/C,YAAc2D,mCAS5C7C,EAAAZ,UAAA2D,mBAAA,SAAmBC,GACfpE,KAAKkE,OAAOb,cAAc/C,YAAc8D,EAAMC,OAGlDjD,EAAAZ,UAAA8D,gBAAA,WAAA,IAAAC,EAAAvE,KAEIA,KAAKkE,OAAOb,cAAcmB,iBAAiB,WAAW,WAClDD,EAAKvB,WAAY,EACjBuB,EAAKrB,SAAWuB,KAAKC,MAAMH,EAAKL,OAAOb,cAAcH,aAEzDlD,KAAKkE,OAAOb,cAAcmB,iBAAiB,SAAS,WAChDD,EAAKvB,WAAY,KAErBhD,KAAKkE,OAAOb,cAAcmB,iBAAiB,cAAc,WACrDD,EAAKjE,YAAcmE,KAAKC,MAAMH,EAAKL,OAAOb,cAAc/C,gBAM5DN,KAAKkE,OAAOb,cAAcmB,iBAAiB,UAAU,WACjDD,EAAKtB,OAASwB,KAAKC,MAAMH,EAAKL,OAAOb,cAAcJ,WAElDjD,KAAK0C,KACN1C,KAAKkE,OAAOb,cAAcmB,iBAAiB,aAAa,WACpDD,EAAKxB,eAAgB,KAG7B/C,KAAKkE,OAAOb,cAAcmB,iBAAiB,kBAAkB,WACzDD,EAAKxB,eAAgB,EACrBwB,EAAKrB,SAAWuB,KAAKC,MAAMH,EAAKL,OAAOb,cAAcH,aAEzDlD,KAAKkE,OAAOb,cAAcmB,iBAAiB,SAAS,WAChDD,EAAK/B,WAAW9B,KAAK,aAK7BU,EAAAZ,UAAAmE,eAAA,WACQ3E,KAAK+C,gBAGL/C,KAAKkE,OAAOb,cAAcuB,QACtB5E,KAAKM,aAAeN,KAAKkD,SAAWlD,KAAKoD,UACzCpD,KAAKkE,OAAOb,cAAc/C,YAAcN,KAAK6E,YAE7C7E,KAAKkE,OAAOb,cAAc/C,YAAcN,KAAKM,YAGjDN,KAAKkE,OAAOb,cAAcyB,SAE1B9E,KAAKM,YAAcN,KAAKkE,OAAOb,cAAc/C,YAC7CN,KAAKkE,OAAOb,cAAc0B,WAIlC3D,EAAAZ,UAAAsE,KAAA,SAAKE,GAAL,IAAAT,EAAAvE,KAEQgF,IACAhF,KAAK6E,YAAcG,EAAMH,aAAe,EACxC7E,KAAKoD,UAAY4B,EAAM5B,WAAa,GAGxC6B,YAAW,WACPV,EAAKL,OAAOb,cAAcyB,SAC3B,KAIP1D,EAAAZ,UAAA0E,aAAA,WACwB,IAAhBlF,KAAKiD,OACLjD,KAAKmF,UAAU,GAEfnF,KAAKmF,UAAU,IAIvB/D,EAAAZ,UAAA4E,aAAA,WACwB,SAAhBpF,KAAKsB,OACLtB,KAAKsB,OAAS,MACS,QAAhBtB,KAAKsB,OACRtB,KAAKC,OAAOoF,OAAS,EACrBrF,KAAKsB,OAAS,MAEdtB,KAAKsB,OAAS,OAEK,QAAhBtB,KAAKsB,QAAoBtB,KAAKC,OAAOoF,OAAS,IACrDrF,KAAKsB,OAAS,SAIdF,EAAAZ,UAAA2E,UAAA,SAAUG,GACdtF,KAAKiD,OAASqC,EACdtF,KAAKkE,OAAOb,cAAcJ,OAASjD,KAAKiD,QAG5C7B,EAAAZ,UAAA+E,SAAA,WAAA,IAAAhB,EAAAvE,KAEIA,KAAKsE,kBAGLtE,KAAKkE,OAAOb,cAAcmB,iBAAiB,SAAS,WAC5CD,EAAKiB,gDACe,QAAhBjB,EAAKjD,OACLiD,EAAKkB,WACkB,QAAhBlB,EAAKjD,OACZiD,EAAKO,OACEP,EAAKjD,WAMxBtB,KAAKkE,OAAOb,cAAcmB,iBAAiB,cAAc,WACrDD,EAAKb,mBAAmB3C,eAAewD,EAAKL,OAAOb,cAAc/C,gBAKrEN,KAAK0D,mBAAmB/C,cAAc+E,WAAU,SAAAzF,GAC7B,OAAXA,GAAmBA,IAAW,KAC9BsE,EAAKtE,OAASA,EACdsE,EAAKoB,kBAMjBvE,EAAAZ,UAAAoF,YAAA,SAAYC,IACJA,EAAQC,eAAe,kBAAoBD,EAAQC,eAAe,qBAClE9F,KAAK+F,yBAIL3E,EAAAZ,UAAAuF,sBAAA,WACJ/F,KAAKgG,iBAAmB,CAAC,SACrBhG,KAAKiC,eACLjC,KAAKgG,iBAAiBC,KAAK,UAE3BjG,KAAKkC,iBACLlC,KAAKgG,iBAAiBC,KAAK,YAE/BjG,KAAKgG,iBAAiBC,KAAK,WAG/B7E,EAAAZ,UAAAmF,WAAA,WACI3F,KAAK+F,wBAIL/F,KAAKgE,0BAGLhE,KAAKkE,OAAOb,cAAc/C,YAAcN,KAAK6E,YAC7C7E,KAAKkG,qBAEDlG,KAAK+B,UACL/B,KAAK8E,QAIb1D,EAAAZ,UAAAwD,wBAAA,WACI,IAAImC,EAAQ,EACRnG,KAAKC,SACLD,KAAKC,OAAOmG,SAAQ,SAACpB,GACjBA,EAAMmB,MAAQA,OAElBnG,KAAKuB,WAAa,IAAIC,EAAAA,mBAA0BxB,KAAKC,QACrDD,KAAKuB,WAAWwC,UAAY/D,KAAK+D,YAIzC3C,EAAAZ,UAAAiF,SAAA,YACiC,IAAzBzF,KAAK0B,kBACC1B,KAAKuC,aAAe,GAAKvC,KAAK+D,UAAUsC,UAAc,GACpDrG,KAAKuC,aAAe,IAAOvC,KAAK+D,UAAUsB,SAC9CrF,KAAK+D,UAAUuC,cACftG,KAAK+D,UAAUwC,WACPvG,KAAK+D,UAAUuC,eACvBtG,KAAK+D,UAAUyC,aAGvBxG,KAAKM,YAAc,EACnBN,KAAKkD,SAAW,IACXlD,KAAKuC,aAAe,GAAMvC,KAAKC,OAAOoF,OACvCrF,KAAKuC,aAAe,EAEpBvC,KAAKuC,eAETvC,KAAKkG,qBACLlG,KAAK8E,QAGT1D,EAAAZ,UAAAiG,aAAA,WACIzG,KAAKM,YAAc,EACnBN,KAAKkD,SAAW,IACXlD,KAAKwF,8CAgBNxF,KAAK0G,cAfwB,IAAzB1G,KAAK0B,iBACC1B,KAAiB,aAAIA,KAAK+D,UAAUsC,UAAc,GAC1B,IAAtBrG,KAAKuC,eACTvC,KAAK+D,UAAU4C,kBACf3G,KAAK+D,UAAU6C,eACP5G,KAAK+D,UAAU4C,mBACvB3G,KAAK+D,UAAU8C,YAGlB7G,KAAKuC,aAAe,EAAK,EAC1BvC,KAAKuC,aAAgBvC,KAAKC,OAAOoF,OAAS,EAE1CrF,KAAKuC,gBAKbvC,KAAKkG,qBACLlG,KAAK8E,QAGT1D,EAAAZ,UAAAkG,UAAA,WACI1G,KAAKkE,OAAOb,cAAcyD,IAAM9G,KAAKC,OAAOD,KAAKuC,cAAcwE,MAGnE3F,EAAAZ,UAAAwG,YAAA,SAAYb,GACRnG,KAAKuC,aAAe4D,EAAQ,EAC5BnG,KAAKkG,qBACLlG,KAAK8E,QAGT1D,EAAAZ,UAAAgF,4CAAA,WACI,OAAOxF,KAAKkE,OAAOb,cAAc/C,YAAc,GAGnDc,EAAAZ,UAAA0F,mBAAA,WACIlG,KAAK0D,mBAAmB7C,gBAAgBb,KAAKC,OAAOD,KAAKuC,yCA3ThE0E,EAAAA,UAAS/F,KAAA,CAAC,CACPgG,SAAU,6CACVC,SAAA,o3hBAVkDC,EAAAA,gDAwBjDC,EAAAA,4BAKAC,EAAAA,UAASpG,KAAA,CAACqG,EAAAA,aAAc,CAAEC,QAAQ,0BAclCH,EAAAA,+BACAA,EAAAA,qCACAA,EAAAA,qCACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,qCACAA,EAAAA,6BACAA,EAAAA,+BACAA,EAAAA,2BAGAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,8BACAA,EAAAA,0BAKAI,EAAAA,uBAGAH,EAAAA,UAASpG,KAAA,CAAC,cAAe,CAAEsG,QAAQ,yBAYnCH,EAAAA,yBASAA,EAAAA,0BClFL,SAAAK,YACIA,EAAAlH,UAAAmH,UAAA,SAAUC,GACN,IAAMC,GAAS,IAAMpD,KAAKC,MAAMkD,EAAO,OAAOE,OAAO,GAC/CC,GAAW,IAAMtD,KAAKC,MAAOkD,EAAO,KAAQ,KAAKE,OAAO,GACxD7D,GAAW,IAAM2D,EAAO,IAAIE,OAAO,GACzC,MAAc,OAAVD,EAA4BA,EAAK,IAAIE,EAAO,IAAI9D,EAC1C8D,EAAO,IAAI9D,4BAP5B+D,EAAAA,KAAI9G,KAAA,CAAC,CAAE+G,KAAM,6BCkBd,iCANCC,EAAAA,SAAQhH,KAAA,CAAC,CACRiH,aAAc,CAACT,EAAsBtG,GACrCgH,QAAS,CAACC,EAAAA,aAAcC,EAAAA,YAAaC,EAAAA,gBAAiBC,EAAAA,cAAeC,EAAAA,eAAgBC,EAAAA,mBACnFC,EAAAA,gBAAiBC,EAAAA,mBAAoBC,EAAAA,mBAAoBC,EAAAA,eAC3DC,QAAS,CAAC3H,aCrBZ,WAAA,IAAAmD,EAAAvE,KAQSA,KAAAgJ,SAAW,WAChB,MAAO,iBAAiBzE,EAAK4B,MAAK,YAAY5B,EAAK0E,MAAK","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Track } from '../../model/track.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AudioPlayerService {\n\n  // Dynamic update of playlist\n  tracks: Track[] = [];\n  playlistSubject$: BehaviorSubject<Track[]> =\n    new BehaviorSubject<Track[]>(this.tracks);\n\n  // Get the current track\n  currentTrack: Track = null;\n  currentTrackSubject$: BehaviorSubject<Track> =\n    new BehaviorSubject<Track>(this.currentTrack);\n\n  // Get the current time\n  currentTime: any = null;\n  currentTimeSubject$: BehaviorSubject<any> =\n    new BehaviorSubject<any>(this.currentTime);\n\n  setPlaylist(tracks: Track[]) {\n    this.tracks = tracks;\n    this.playlistSubject$.next(this.tracks);\n  }\n\n  getPlaylist(): Observable<Track[]> {\n    return this.playlistSubject$.asObservable();\n  }\n\n  setCurrentTrack(currentTrack: Track) {\n    this.currentTrack = currentTrack;\n    this.currentTrackSubject$.next(this.currentTrack);\n  }\n\n  getCurrentTrack(): Observable<Track> {\n    return this.currentTrackSubject$.asObservable();\n  }\n\n  setCurrentTime(currentTime: any) {\n    this.currentTime = currentTime;\n    this.currentTimeSubject$.next(this.currentTime);\n  }\n\n  getCurrentTime(): Observable<any> {\n    return this.currentTimeSubject$.asObservable();\n  }\n\n}\n","\nimport { Component, OnInit, Input, ViewChild, Output, ElementRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { Track } from '../../model/track.model';\nimport { MatSlider } from '@angular/material/slider';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { AudioPlayerService } from '../../service/audio-player-service/audio-player.service';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'mat-advanced-audio-player,ngx-audio-player',\n    templateUrl: './ngx-audio-player.component.html',\n    styleUrls: ['./ngx-audio-player.component.css']\n})\nexport class AudioPlayerComponent implements OnInit, OnChanges {\n\n    audioPlayerService: AudioPlayerService;\n    repeat: string = 'all';\n    constructor(elem: ElementRef) {\n        if (elem.nativeElement.tagName.toLowerCase() === 'mat-advanced-audio-player') {\n            console.warn(`'mat-advanced-audio-player' selector is deprecated; use 'ngx-audio-player' instead.`);\n        }\n        this.audioPlayerService = new AudioPlayerService();\n    }\n\n    @Input()\n    set playlist(playlist: Track[]) {\n        this.audioPlayerService.setPlaylist(playlist);\n    }\n\n    @ViewChild(MatPaginator, { static: false }) set matPaginator(mp: MatPaginator) {\n        this.paginator = mp;\n        this.setDataSourceAttributes();\n    }\n\n\n    displayedColumns: string[];\n    dataSource = new MatTableDataSource<Track>();\n    paginator: MatPaginator;\n\n    timeLineDuration: MatSlider;\n\n    tracks: Track[] = [];\n\n    @Input() displayTitle = true;\n    @Input() displayPlaylist = true;\n    @Input() displayVolumeControls = true;\n    @Input() displayRepeatControls = true;\n    @Input() pageSizeOptions = [10, 20, 30];\n    @Input() expanded = true;\n    @Input() autoPlay = false;\n    @Input() disablePositionSlider = false;\n    @Input() displayArtist = false;\n    @Input() displayDuration = false;\n\n    // Support for internationalization\n    @Input() tableHeader = 'Playlist';\n    @Input() titleHeader = 'Title';\n    @Input() artistHeader = 'Artist';\n    @Input() durationHeader = 'Duration';\n\n\n    currentIndex = 0;\n\n    @Output()\n    trackEnded: Subject<string> = new Subject<string>();\n\n    @ViewChild('audioPlayer', { static: true }) player: ElementRef;\n\n    iOS = (/iPad|iPhone|iPod/.test(navigator.platform)\n        || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1));\n\n    loaderDisplay = false;\n    isPlaying = false;\n    currentTime = 0;\n    volume = 0.1;\n    duration = 0.01;\n\n    private startOffsetValue = 0;\n    @Input()\n    set startOffset(seconds: number) {\n        this.startOffsetValue = seconds;\n        this.player.nativeElement.currentTime = seconds;\n    }\n    get startOffset(): number {\n        return this.startOffsetValue;\n    }\n\n    @Input()\n    public endOffset = 0;\n\n    currTimePosChanged(event) {\n        this.player.nativeElement.currentTime = event.value;\n    }\n\n    bindPlayerEvent(): void {\n\n        this.player.nativeElement.addEventListener('playing', () => {\n            this.isPlaying = true;\n            this.duration = Math.floor(this.player.nativeElement.duration);\n        });\n        this.player.nativeElement.addEventListener('pause', () => {\n            this.isPlaying = false;\n        });\n        this.player.nativeElement.addEventListener('timeupdate', () => {\n            this.currentTime = Math.floor(this.player.nativeElement.currentTime);\n            // BUG: Commenting for `ended` event not firing #66\n            // if (this.currentTime >= this.duration - this.endOffset) {\n            //     this.player.nativeElement.pause();\n            // }\n        });\n        this.player.nativeElement.addEventListener('volume', () => {\n            this.volume = Math.floor(this.player.nativeElement.volume);\n        });\n        if (!this.iOS) {\n            this.player.nativeElement.addEventListener('loadstart', () => {\n                this.loaderDisplay = true;\n            });\n        }\n        this.player.nativeElement.addEventListener('loadedmetadata', () => {\n            this.loaderDisplay = false;\n            this.duration = Math.floor(this.player.nativeElement.duration);\n        });\n        this.player.nativeElement.addEventListener('ended', () => {\n            this.trackEnded.next('ended');\n        });\n\n    }\n\n    playBtnHandler(): void {\n        if (this.loaderDisplay) {\n            return;\n        }\n        if (this.player.nativeElement.paused) {\n            if (this.currentTime >= this.duration - this.endOffset) {\n                this.player.nativeElement.currentTime = this.startOffset;\n            } else {\n                this.player.nativeElement.currentTime = this.currentTime;\n            }\n\n            this.player.nativeElement.play();\n        } else {\n            this.currentTime = this.player.nativeElement.currentTime;\n            this.player.nativeElement.pause();\n        }\n    }\n\n    play(track?: Track): void {\n\n        if (track) {\n            this.startOffset = track.startOffset || 0;\n            this.endOffset = track.endOffset || 0;\n        }\n\n        setTimeout(() => {\n            this.player.nativeElement.play();\n        }, 50);\n\n    }\n\n    toggleVolume() {\n        if (this.volume === 0) {\n            this.setVolume(1.0);\n        } else {\n            this.setVolume(0);\n        }\n    }\n\n    toggleRepeat() {\n        if (this.repeat === 'none') {\n            this.repeat = 'all';\n        } else if (this.repeat === 'all') {\n            if (this.tracks.length > 1) {\n                this.repeat = 'one';\n            } else {\n                this.repeat = 'none';\n            }\n        } else if (this.repeat === 'one' && this.tracks.length > 1) {\n            this.repeat = 'none';\n        }\n    }\n\n    private setVolume(vol) {\n        this.volume = vol;\n        this.player.nativeElement.volume = this.volume;\n    }\n\n    ngOnInit() {\n\n        this.bindPlayerEvent();\n\n        // auto play next track\n        this.player.nativeElement.addEventListener('ended', () => {\n            if (this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {\n                if (this.repeat === 'all') {\n                    this.nextSong();\n                } else if (this.repeat === 'one') {\n                    this.play();\n                } else if (this.repeat === 'none') {\n                    // Do nothing\n                }\n            }\n        });\n\n        this.player.nativeElement.addEventListener('timeupdate', () => {\n            this.audioPlayerService.setCurrentTime(this.player.nativeElement.currentTime);\n        });\n\n        // Subscribe to playlist observer from AudioPlayerService and\n        // update the playlist within MatAdvancedAudioPlayerComponent\n        this.audioPlayerService.getPlaylist().subscribe(tracks => {\n            if (tracks !== null && tracks !== []) {\n                this.tracks = tracks;\n                this.initialize();\n            }\n        });\n\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.hasOwnProperty('displayArtist') || changes.hasOwnProperty('displayDuration')) {\n            this.buildDisplayedColumns();\n        }\n    }\n\n    private buildDisplayedColumns() {\n        this.displayedColumns = ['title'];\n        if (this.displayArtist) {\n            this.displayedColumns.push('artist');\n        }\n        if (this.displayDuration) {\n            this.displayedColumns.push('duration');\n        }\n        this.displayedColumns.push('status');\n    }\n\n    initialize() {\n        this.buildDisplayedColumns();\n\n        // populate indexs for the track and configure\n        // material table data source and paginator\n        this.setDataSourceAttributes();\n\n\n        this.player.nativeElement.currentTime = this.startOffset;\n        this.updateCurrentTrack();\n\n        if (this.autoPlay) {\n            this.play();\n        }\n    }\n\n    setDataSourceAttributes() {\n        let index = 1;\n        if (this.tracks) {\n            this.tracks.forEach((track: Track) => {\n                track.index = index++;\n            });\n            this.dataSource = new MatTableDataSource<Track>(this.tracks);\n            this.dataSource.paginator = this.paginator;\n        }\n    }\n\n    nextSong(): void {\n        if (this.displayPlaylist === true\n            && (((this.currentIndex + 1) % this.paginator.pageSize) === 0\n                || (this.currentIndex + 1) === this.paginator.length)) {\n            if (this.paginator.hasNextPage()) {\n                this.paginator.nextPage();\n            } else if (!this.paginator.hasNextPage()) {\n                this.paginator.firstPage();\n            }\n        }\n        this.currentTime = 0;\n        this.duration = 0.01;\n        if ((this.currentIndex + 1) >= this.tracks.length) {\n            this.currentIndex = 0;\n        } else {\n            this.currentIndex++;\n        }\n        this.updateCurrentTrack();\n        this.play();\n    }\n\n    previousSong(): void {\n        this.currentTime = 0;\n        this.duration = 0.01;\n        if (!this.checkIfSongHasStartedSinceAtleastTwoSeconds()) {\n            if (this.displayPlaylist === true\n                && (((this.currentIndex) % this.paginator.pageSize) === 0\n                    || (this.currentIndex === 0))) {\n                if (this.paginator.hasPreviousPage()) {\n                    this.paginator.previousPage();       \n                } else if (!this.paginator.hasPreviousPage()) {\n                    this.paginator.lastPage();\n                }\n            }\n            if ((this.currentIndex - 1) < 0) {\n                this.currentIndex = (this.tracks.length - 1);\n            } else {\n                this.currentIndex--;\n            }\n        } else {\n            this.resetSong();\n        }\n        this.updateCurrentTrack();\n        this.play();\n    }\n\n    resetSong(): void {\n        this.player.nativeElement.src = this.tracks[this.currentIndex].link;\n    }\n\n    selectTrack(index: number): void {\n        this.currentIndex = index - 1;\n        this.updateCurrentTrack();\n        this.play();\n    }\n\n    checkIfSongHasStartedSinceAtleastTwoSeconds(): boolean {\n        return this.player.nativeElement.currentTime > 2;\n    }\n\n    updateCurrentTrack() {\n        this.audioPlayerService.setCurrentTrack(this.tracks[this.currentIndex]);\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n/*\n * Transform seconds to minutes:seconds\n * Example : 270 -> 02:30\n*/\n@Pipe({ name: 'secondsToMinutes' })\nexport class SecondsToMinutesPipe implements PipeTransform {\n    transform(time: number): string {\n        const hours = ('0' + Math.floor(time / 3600)).slice(-2);\n        const minutes = ('0' + Math.floor((time % 3600) / 60)).slice(-2);\n        const seconds = ('0' + time % 60).slice(-2);\n        if (hours !== '00') { return `${hours}:${minutes}:${seconds}`; }\n        return `${minutes}:${seconds}`;\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { CommonModule } from '@angular/common';\nimport { SecondsToMinutesPipe } from './pipe/seconds-to-minutes';\n\nimport { FormsModule } from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\nimport { AudioPlayerComponent } from './component/ngx-audio-player/ngx-audio-player.component';\n\n@NgModule({\n  declarations: [SecondsToMinutesPipe, AudioPlayerComponent],\n  imports: [CommonModule, FormsModule, MatButtonModule, MatCardModule, MatTableModule, MatFormFieldModule,\n    MatSliderModule, MatExpansionModule, MatPaginatorModule, MatIconModule],\n  exports: [AudioPlayerComponent]\n})\nexport class NgxAudioPlayerModule {\n}\n","export class Track {\n  index?: number;\n  link: string;\n  title: string;\n  startOffset?: number;\n  endOffset?: number;\n  duration?: number;\n  artist?: string;\n  public toString = (): string => {\n    return `Track (index: ${this.index}, title: ${this.title})`;\n  }\n}\n"]}